<div id = "main">
	<h3><a id="start">Gamecenter plugin</a></h3>
	<p></p>
	<p>This plugins allows you to access apple gamecenter</p>
	<p></p>
	<p><h3>Platforms:</h3> iOS, tvOS, macOS</p>
	<p></p>
	<p><h3>Limitations:</h3>tvOS does not support getting friends and also leaderboard.show will show achievements(I recommend making your own interface).</p>
	<p></p>
	<p><h3>Functions:</h3></p>
	<p></p>
	<p>gc.init(listener)</p>
	<p>handles sign in and connection status</p>
	<unordered-list-item>
		<li>type(string)--"login"</li>
		<unordered-list-item>
			<li>status(string)-- "signed in", "could not login", "showing login", or "could not access gamecenter"</li>
		</unordered-list-item>
		<li>type(string)--"error"</li>
		<unordered-list-item>
			<li>status(string)-- "error" or "other error"</li>
			<li>error(string)-- "feature not available", "unable to access gamecenter", "unknown error", "internet not available", or if "other error" you will get a description of error</li>
		</unordered-list-item>
	</unordered-list-item>
<code><pre>
local gc = require "plugin.gamecenter"<br/>
local json = require("json")<br/>
gc.init(function(e)<br/>
	print("init")<br/>
	print("----------")<br/>
	print(json.encode(e))<br/>
	print("----------")<br/>
	if(e.status == "signed in") then<br/>
	end<br/>
end)<br/>
</pre></code>
	<p></p>
	<p>gc.isAvailable() -- returns(boolean) true is gamecenter is available and false if not available</p>
<code><pre>
print(gc.isAvailable())<br/>
</pre></code>
	<p></p>
	<p><h3>Nodes:</h3></p>
	<p></p>
	<h3><li>gc.leaderboards -- handles gamecenter leaderboards</li></h3>
	<unordered-list-item>
		<li>gc.leaderboards.show("leaderboardId") --returns "showing"</li>
		<li>leaderboardId (string)(optional) If this is nil or blank, it will show all leaderboards. If it is a string, it will show that leaderboard based on the id</li>
		<li></li>
<code><pre>
print(gc.leaderboards.show("insert cool leaderboard id here"))--prints "showing"
</pre></code>
		<li>gc.leaderboards.loadScores("leaderboardId", listener,{params}) --returns "showing"</li>
		<li>leaderboardId (string) the id of leaderboard that you want to get scores from</li>
		<li>listener (function)</li>
		<unordered-list-item>
			<li>status(string)-- can be "success" or "error"</li>
			<li>error(string)-- explains the error</li>
			<li>scores(array) each array contains table:</li>
			<unordered-list-item>
				<li>date(string)-- returns date of score ("HH:mm yyyy/MMM/d")(timezone GMT)</li>
				<li>leaderboardIdentifier(string)-- leaderboardId of the leaderboard requested</li>
				<li>rank(integer)-- how high the person is ranked on the the leaderboard</li>
				<li>playerId(string)-- id of player who got the score</li>
				<li>value(integer)-- the actual score</li>
				<li>playerAlias(string)--username of player</li>
				<li>formattedValue(string)--A playerâ€™s score as a localized string. You determine how your scores are formatted when you define the leaderboard on iTunes Connect.</li>
			</unordered-list-item>
		</unordered-list-item>
		<li>params (table)(optional)</li>
		<li>insert these values in table:</li>
		<unordered-list-item>
			<li>timeScope(string)-- possible values are "today", "week", or "all"(all is default)</li>
			<li>playerScope(string)-- possible values are "friends" or "global"(global is default)</li>
			<li>rangeMin(integer)-- the starting number to start getting scores from a leaderboard(requires rangeMax and only can get up to 100 values)</li>
			<li>rangeMax(integer)-- the ending number to stop getting scores from a leaderboard(requires rangeMin and only can get up to 100 values)</li>
			<li>rangeMax(integer)-- the ending number to stop getting scores from a leaderboard(requires rangeMin and only can get up to 100 values)</li>
		</unordered-list-item>
<code><pre>
local function lis(e)<br/>
    print("loadScores")<br/>
    print("----------")<br/>
    print(json.encode(e))<br/>
    print("----------")<br/>
end<br/>
gc.leaderboards.loadScores("insert leaderboard id here", lis,{timeScope = "today", playerScope= "friends"})<br/>
</pre></code>
		<li>gc.leaderboards.loadScore("leaderboardId", listener) --returns (integer) your score from a leaderboard</li>
		<li>leaderboardId (string) the id of leaderboard that you want to get the signed users score from</li>
		<li>listener (function)</li>
		<unordered-list-item>
			<li>status(string)-- can be "success" or "error"</li>
			<li>error(string)-- explains the error</li>
			<li>score(integer) score of player</li>
		</unordered-list-item>
<code><pre>
gc.leaderboards.submit("leaderboardId", 123456789, function(e)<br/>
	print("submit score")<br/>
	print("----------")<br/>
	print(json.encode(e))<br/>
	print("----------")<br/>
end)<br/>
</pre></code>
		<li></li>
		<li>gc.leaderboards.submit("leaderboardId", score, listener) </li>
		<li>leaderboardId (string) the id of leaderboard that you want to get the signed users scores from</li>
		<li>score(integer) the score to be sent</li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string)-- either "score sent" or "error"</li>
			<li>error(string)-- explains the error</li>
		</unordered-list-item>
<code><pre>
gc.leaderboards.submit("leaderboardId", 123456789, function(e)<br/>
    print("submit score")<br/>
    print("----------")<br/>
    print(json.encode(e))<br/>
    print("----------")<br/>
end)<br/>
</pre></code>
	</unordered-list-item>
	<p></p>
	<h3><li>gc.achievements -- handles gamecenter achievements</li></h3>
	<unordered-list-item>
		<li>gc.achievements.show() --returns "showing"</li>
		<li>show the achievement gamecenter popup</li>
		<li></li>
<code><pre>
print(gc.achievements.show())-- prints "showing"<br/>
</pre></code>
		<li>gc.achievements.loadAll(listener)</li>
		<li>returns all the achievements</li>
		<li>listener (function)</li>
		<unordered-list-item>
			<li>status(string)-- can be "success" or "error"</li>
			<li>error(string)-- explains the error</li>
			<li>achievements(array) each array contains table:</li>
			<unordered-list-item>
				<li>lastReportedDate(string)-- The last time that progress on the achievement was successfully reported to Game Center.("HH:mm yyyy/MMM/d")(timezone GMT)</li>
				<li>percentComplete(interger)-- leaderboardId of the leaderboard requested (1-100)</li>
				<li>identifier(string)-- the id of the achievement</li>
				<li>unachievedDescription(string)-- A localized description of the achievement to be used when the local player has not completed the achievement.</li>
				<li>title(string)-- title of achievement</li>
				<li>achievedDescription(string)--A localized description to be used after the local player has completed the achievement.</li>
				<li>status(string)-- either "hidden" or "visible"</li>
				<li>replayable(string)-- either "replayable" or "not replayable"</li>
			</unordered-list-item>
		</unordered-list-item>
<code><pre>
local json = require("json")<br/>
gc.achievements.loadAll(function(e)<br/>
	print("achievement loadAll")<br/>
	print("----------")<br/>
	print(json.encode(e))<br/>
	print("----------")<br/>
end)<br/>
</pre></code>
		<li>gc.achievements.submit("achievementId", progress, shouldDisplayNotification, listener) </li>
		<li>achievementId (string) the id of achievement that you want to send the signed users progress on </li>
		<li>shouldDisplayNotification(Boolean) set to true for showing banner on completion</li>
		<li>progress(integer) the progress to be sent should be between 1-100</li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string)-- either "achievement set" or "error"</li>
			<li>error(string)-- explains the error</li>
		</unordered-list-item>
<code><pre>
gc.achievements.submit(achievementId, achievementProgress, true,function(e)<br/>
    print("achievement submit")<br/>
    print("----------")<br/>
    print(json.prettify(e))<br/>
    print("----------")<br/>
end)<br/>
</pre></code>
		<li>gc.achievements.reset(listener) </li>
		<li>resets all achievements immediately</li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string)-- either "success" or "error"</li>
			<li>error(string)-- explains the error</li>
		</unordered-list-item>
<code><pre>
gc.achievements.reset(function(e)<br/>
	print("achievements reset")<br/>
	print("----------")<br/>
	print(json.encode(e))<br/>
	print("----------")<br/>
end)<br/>
</pre></code>
	</unordered-list-item>
	<h3><li>gc.challenges -- handles gamecenter challenges</li></h3>
	<unordered-list-item>
		<li>gc.challenges.show() --returns "showing"</li>
		<li>show the challenges gamecenter popup</li>
		<li></li>
<code><pre>
print(gc.challenges.show()) --prints "showing"<br/>
</pre></code>
		<li>gc.challenges.load(listener)</li>
		<li>returns all the challenges</li>
		<li>listener (function)</li>
		<unordered-list-item>
			<li>status(string)-- can be "success" or "error"</li>
			<li>error(string)-- explains the error</li>
			<li>challenges(array) each array contains table:</li>
			<unordered-list-item>
				<li>issuingPlayerId(string)-- the playerid of the who sent the challenge</li>
				<li>issuingPlayerAlias(string)-- the player name of the who sent the challenge</li>
				<li>receivingPlayerId(string)-- the id of the player who received</li>
				<li>receivingPlayerAlias(string)-- the name of the player who received</li>
				<li>state(string)-- state of challenge: "declined", "complete", "pending", or "invalid"</li>
				<li>message(string)--the message sent with a challenge</li>
				<li>issueDate(string)-- the date the challenge was sent ("HH:mm yyyy/MMM/d")(timezone GMT)</li>
				<li>completionDate(string)-- The date the challenge was completed ("HH:mm yyyy/MMM/d")(timezone GMT)</li>
			</unordered-list-item>
		</unordered-list-item>
		<code><pre>
		gc.challenges.load(function(e)<br/>
		    print("challenges load")<br/>
		    print("----------")<br/>
		    print(json.encode(e))<br/>
		    print("----------")<br/>
		end)<br/>
		</pre></code>
			</unordered-list-item>
			<p></p>
			<h3><li>gc.player -- handles player data</li></h3>
			<unordered-list-item>
				<li>gc.player.id() (string) --returns the gamecenter id</li>
		<code><pre>
		print(gc.player.id())<br/>
		</pre></code>
				<li>gc.player.name() (string) --returns the gamecenter username</li>
		<code><pre>
		print(gc.player.name())<br/>
		</pre></code>
				<li>gc.player.underage() (boolean) --returns a boolean value that indicates whether the local player is underage</li>
		<code><pre>
		print(gc.player.underage())<br/>
		</pre></code>
				<li>gc.player.multiplayerGamingRestricted() (boolean) --(iOS 13+)returns a Boolean value that indicates whether the player can join multiplayer games.</li>
		<code><pre>
		print(gc.player.multiplayerGamingRestricted())<br/>
		</pre></code>
				<li>gc.player.friends(listener)</li>
				<li>listener(function)</li>
				<unordered-list-item>
					<li>status(string)-- can be "success" or "error"</li>
					<li>error(string)-- explains the error</li>
					<li>friends(array) -- returns array of tables which contain playerID(string) and displayName(string)</li>
				</unordered-list-item>
		<code><pre>
		gc.player.friends(function(e)<br/>
		    print("player friends")<br/>
		    print("----------")<br/>
		    print(json.encode(e))<br/>
		    print("----------")<br/>
		end)<br/>
		</pre></code>
	</unordered-list-item>
			<li>gc.player.identityVerificationSignature(listener)-- Generates a signature so that a third-party server can authenticate the local player.</li>
			<li>listener(function)</li>
			<unordered-list-item>
				<li>isError(boolean)</li>
				<li>error(string)-- explains the error</li>
				<li>publicKeyURL(string)-- The URL for the public encryption key.</li>
				<li>signature(string)-- The verification signature data that GameCenter generates</li>
				<li>salt(string)-- A random string that GameCenter uses to compute the hash and randomize it.</li>
				<li>timestamp(number)-- The signatureâ€™s creation date and time</li>
			</unordered-list-item>
		<code><pre>
		gc.player.identityVerificationSignature(function(e)<br/>
			print("Identity Verification Signature")<br/>
			print("----------")<br/>
			print(json.encode(e))<br/>
			print("----------")<br/>
		end)<br/>
		</pre></code>
		</unordered-list-item>
	<p></p>
	<h3><li>gc.multiplayer -- handles multiplayer</li></h3>
	<unordered-list-item>
		<li>gc.multiplayer.invite(minPlayers, maxPlayers, inviteMessage, showExistingMatches ,listener, recipients) --invite a new player and show existing matches</li>
		<li>minPlayers(optional)(integer) the minimum number of players</li>
		<li>maxPlayers(optional)(integer) the max number of players</li>
		<li>inviteMessage(optional)(string) The string displayed on another playerâ€™s device when invited to join a match</li>
		<li>showExistingMatches(optional (default is true))(boolean) if true the UI will show existing matches</li>
		<li>listener (function)</li>
		<unordered-list-item>
			<li>status(string)-- can be "finish", "foundMatch","playerDidQuitForError", "playerDidQuit", "finish", "cancelled", or "error"</li>
			<li>creationDate(string)-- date of match creation</li>
			<li>matchID(string)-- matchID</li>
			<li>itIsMyTurn(boolean)-- boolean for whether it is your turn or not</li>
			<li>error(string)-- error when status is "error"</li>
		</unordered-list-item>
		<li>recipients(optional)(array of strings) put player IDs in here</li>
<code><pre>
gamecenter.multiplayer.invite(2,4,"Come play now", false,function(e)<br/>
	print("invite")<br/>
	print("----------")<br/>
	print(json.encode(e))<br/>
	print("----------")<br/>
end)<br/>
</pre></code>
		<li>gc.multiplayer.newMatch(minPlayers, maxPlayers, inviteMessage, recipients, listener) --create match without using native UI</li>
		<li>minPlayers(optional)(integer) the minimum number of players</li>
		<li>maxPlayers(optional)(integer) the max number of players</li>
		<li>inviteMessage(optional)(string) The string displayed on another playerâ€™s device when invited to join a match</li>
		<li>recipients(optional)(array of strings) put player IDs in here</li>
		<li>listener (function)</li>
		<unordered-list-item>
			<li>status(string)-- can be "finish", "foundMatch","playerDidQuitForError", "playerDidQuit", "finish", "cancelled", or "error"</li>
			<li>creationDate(string)-- date of match creation</li>
			<li>matchID(string)-- matchID</li>
			<li>itIsMyTurn(boolean)-- boolean for whether it is your turn or not</li>
			<li>error(string)-- error when status is "error"</li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.newMatch(2,4,"Come play now", {friendID},function(e)<br/>
	if e.itIsMyTurn == true then<br/>
		quitGame.alpha = 1<br/>
		printGameData.alpha = 1<br/>
		endTurn.alpha = 1<br/>
		printGameData.alpha = 1<br/>
	else<br/>
		quitGame.alpha = 1<br/>
		printGameData.alpha = 1<br/>
		endTurn.alpha = 0<br/>
	end<br/>
end)<br/>
</pre></code>
		<li>gc.multiplayer.setListener(listener)-- Set Listener for multiplayer callbacks</li>
		<li>listener (function)</li>
		<unordered-list-item>
			<li>status(string)-- can be "exchangeCancellation", "receivedExchangeReplies","receivedExchangeRequest", "requestMatchWithOtherPlayer", "matchEnded", "receivedTurnEventForMatch", or "playerWantsToQuit"</li>
			<li>participants(array)-- contatins table which contain playerOutcome(string)(can be "won", "lost", "quit", "tied", "first", "second", "third", "fourth", "timeExpired", "customRange", "none") ,displayName(string), playerID(string)</li>
			<li>message(string)-- match message</li>
			message
			<li>matchID(string)-- matchID</li>
			<li>itIsMyTurn(boolean)-- boolean for whether it is your turn or not</li>
			<li>didBecomeActive(boolean)-- when status == "receivedTurnEventForMatch"</li>
			<li>playerName(string)-- the name of player for the event</li>
			<li>playerID(string)-- the id of player for the event</li>
			<li>activeExchanges(table)-- contatins data(table), message(string), displayName(string), playerID(string)</li>
			<li>playersToInvite(table)-- contatins displayName(string), playerID(string)</li>
			<li>matchData(table)-- table of match data</li>

			<li>error(string)-- error when status is "error"</li>
			<li>currentParticipantDisplayName(string)-- Current Player Display Name</li>
			<li>currentParticipantID(string)-- Current Player PlayerId/gamePlayerID</li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.setListener(function(e)<br/>
    print("Multiplayer Listener")<br/>
    print("----------")<br/>
    print(json.encode(e))<br/>
    print("----------")<br/>
end)
</pre></code>
		<li>gc.multiplayer.getMatchData(listener)</li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string)-- can be "gotMatchData", "matchNotActive", or "error"</li>
			<li>participants(array)-- contatins table which contain playerOutcome(string)(can be "won", "lost", "quit", "tied", "first", "second", "third", "fourth", "timeExpired", "customRange", "none") ,displayName(string), playerID(string)</li>
			<li>currentParticipantDisplayName(string)-- Current Player Display Name</li>
			<li>currentParticipantID(string)-- Current Player PlayerId/gamePlayerID</li>
			<li>error(string)-- explains the error</li>
			<li>matchID(string) -- matchID</li>
			<li>data(table) -- data from match</li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.getMatchData(function(e)<br/>
    print("Got Match Data")<br/>
    print("----------")<br/>
    print(json.encode(e))<br/>
    print("----------")<br/>
end)<br/>
</pre></code>
		<li>gc.multiplayer.getMatchStatus(listener)</li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string)-- can be "open", "matching", "matchNotActive", or "ended"</li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.getMatchStatus(function(e)<br/>
    print("Get Match status")<br/>
    print("----------")<br/>
    print(e.status)<br/>
    print("----------")<br/>
end)<br/>
</pre></code>
		<li>gc.multiplayer.updateData(data,listener)</li>
		<li>data(table)-- data to update</li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string)-- "dataUpdated" or "error"</li>
			<li>error(string)-- explains the error</li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.updateData({hello="world"},function(e)<br/>
    print("Update Data")<br/>
    print("----------")<br/>
    print(e.status)<br/>
    print("----------")<br/>
end)<br/>
</pre></code>
		<li>gc.multiplayer.deleteMatch(matchId,listener)</li>
		<li>matchId(string (optional will delete active match if nil))-- matchId to delete match</li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string)-- "matchDeleted" or "error"</li>
			<li>error(string)-- explains the error</li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.deleteMatch(function(e)<br/>
    print("Delete Match")<br/>
    print("----------")<br/>
    print(e.status)<br/>
    print("----------")<br/>
end)<br/>
</pre></code>
		<li>gc.multiplayer.quitOutOfTurn(outcome,listener)</li>
		<li>outcome(string)(optional default "none") -- can be "won", "lost", "quit", "tied", "first", "second", "third", "fourth", "timeExpired", "customRange", or "none"</li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string)-- "quitOutOfTurn" or "error"</li>
			<li>error(string)-- explains the error</li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.quitOutOfTurn("won", function(e)<br/>
    print("Quit Out of Turn")<br/>
    print("----------")<br/>
    print(e.status)<br/>
    print("----------")<br/>
end)<br/>
</pre></code>
		<li>gc.multiplayer.quitInTurn(outcome, turnTimeout, data, listener)</li>
		<li>outcome(string)(optional default "none") -- can be "won", "lost", "quit", "tied", "first", "second", "third", "fourth", "timeExpired", "customRange", or "none"</li>
		<li>turnTimeout(integer)-- number of seconds before a players turn is skipped </li>
		<li>data(table)-- data quit in turn with</li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string)-- "quitInTurn", "matchNotActive", or "error"</li>
			<li>error(string)-- explains the error</li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.quitInTurn("lost", 900, {hello = "world"}, function(e)<br/>
    print("Quit In Turn")<br/>
    print("----------")<br/>
    print(e.status)<br/>
    print("----------")<br/>
end)<br/>
</pre></code>
		<li>gc.multiplayer.endTurn(data, turnTimeout, listener)</li>
		<li>data(table)-- data to end turn </li>
		<li>turnTimeout(integer)-- number of seconds before a players turn is skipped </li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string)-- "turnEnded", "matchNotActive", or "error"</li>
			<li>error(string)-- explains the error</li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.endTurn( {hello = "world"}, 900, function(e)<br/>
    print("End Turn")<br/>
    print("----------")<br/>
    print(e.status)<br/>
    print("----------")<br/>
end)<br/>
</pre></code>
		<li>gc.multiplayer.endMatch(data, listener)</li>
		<li>data(table)-- data to end match </li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string)-- "endMatch", "matchNotActive", or "error"</li>
			<li>error(string)-- explains the error</li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.endMatch( {hello = "world"}, function(e)<br/>
    print("End Match")<br/>
    print("----------")<br/>
    print(e.status)<br/>
    print("----------")<br/>
end)<br/>
</pre></code>
		<li>gc.multiplayer.isItMyTurn(listener)</li>
		<li>data(table)-- data to end match </li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string)-- can be "matchNotActive", "notMyTurn", "itIsMyTurn"</li>
			<li>playerName(string)-- the name of player for the event</li>
			<li>playerID(string)-- the id of player for the event</li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.isItMyTurn( function(e)<br/>
    print("Is it my turn?")<br/>
    print("----------")<br/>
    print(e.status)<br/>
    print("----------")<br/>
end)<br/>
</pre></code>
		<li>gc.multiplayer.listMatches(listener)</li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>isError(boolean)</li>
			<li>error(string)-- explains the error</li>
			<li>matches(array)--contains array of tables which has matchID(string), creationDate(string which in HH:mm yyyy/MMM/d format), matchData(table), and participants(array)-- contatins table which contain playerOutcome(string)(can be "won", "lost", "quit", "tied", "first", "second", "third", "fourth", "timeExpired", "customRange", "none") ,displayName(string), playerID(string), currentParticipantDisplayName(string), currentParticipantID(string)</li></li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.listMatches( function(e)<br/>
	print("List Matches")<br/>
	print("----------")<br/>
	print(json.encode(e.matches))<br/>
	print("----------")<br/>
end)<br/>
</pre></code>
		<li>gc.multiplayer.startMatchWithId(matchId,listener)</li>
		<li>matchId(string)</li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string) -- can be "error" or "startedMatchWithId"</li>
			<li>participants(array)-- contatins table which contain playerOutcome(string)(can be "won", "lost", "quit", "tied", "first", "second", "third", "fourth", "timeExpired", "customRange", "none") ,displayName(string), playerID(string)</li>
			<li>error(string)-- explains the error</li>
			<li>itIsMyTurn(boolean)-- boolean for whether it is your turn or not</li>
			<li>matchData(table)-- table of match data</li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.listMatches( function(e)<br/>
	print("List Matches")<br/>
	print("----------")<br/>
	print(json.encode(e.matches))<br/>
	print("----------")<br/>
end)<br/>
</pre></code>
		<script src="https://gist.github.com/scottrules44/bec9df42fd6967371d9ab2890df27286.js"></script>
		<li>gc.multiplayer.rematch(listener) -- rematch current game</li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string) -- can be "error" or "rematchStarted"</li>
			<li>participants(array)-- contatins table which contain playerOutcome(string)(can be "won", "lost", "quit", "tied", "first", "second", "third", "fourth", "timeExpired", "customRange", "none") ,displayName(string), playerID(string)</li>
			<li>error(string)-- explains the error</li>
			<li>itIsMyTurn(boolean)-- boolean for whether it is your turn or not</li>
			<li>currentParticipantDisplayName(string)-- Current Player Display Name</li>
			<li>currentParticipantID(string)-- Current Player PlayerId/gamePlayerID</li>
			<li>matchData(table)-- table of match data</li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.startMatchWithId("insertMatchIdHere",function(e)<br/>
    print("Start Match With Id")<br/>
    print("----------")<br/>
    print(e.status)<br/>
    print("----------")<br/>
end)<br/>
</pre></code>
		<li>gc.multiplayer.sendReminderToAllParticipants(localizableMessageKey, arguments, listener) -- send a reminder to all participants</li>
		<li>localizableMessageKey(string)</li>
		<li>arguments(array of strings)</li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string) -- can be "error" or "reminderSent"</li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.sendReminderToAllParticipants("hello there", {"hello", "world"}, function(e)<br/>
    print("Send Reminder To All Participants")<br/>
    print("----------")<br/>
    print(e.status)<br/>
    print("----------")<br/>
end)<br/>
</pre></code>
		<li>gc.multiplayer.sendReminderToParticipantWithId(participantId, localizableMessageKey, arguments, listener) -- send a reminder to participant with Id</li>
		<li>participantId(string) -- the id of participant(either PlayerId or gamePlayerID) </li>
		<li>localizableMessageKey(string)</li>
		<li>arguments(array of strings)</li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string) -- can be "error", "playerNotFound", or "reminderSent"</li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.sendReminderToParticipantWithId( "participantId","hello there", {"hello", "world"}, function(e)<br/>
    print("Send Reminder To Participant With Id")<br/>
    print("----------")<br/>
    print(e.status)<br/>
    print("----------")<br/>
end)
</pre></code>
		<li>gc.multiplayer.listParticipants(listener) -- list participants</li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string)-- can be "gotParticipants", "matchNotActive", or "error"</li>
			<li>participants(array)-- contatins table which contain playerOutcome(string)(can be "won", "lost", "quit", "tied", "first", "second", "third", "fourth", "timeExpired", "customRange", "none") ,displayName(string), playerID(string)</li>
			<li>currentParticipantDisplayName(string)-- Current Player Display Name</li>
			<li>currentParticipantID(string)-- Current Player PlayerId/gamePlayerID</li>
			<li>error(string)-- explains the error</li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.listParticipants( function(e)<br/>
	print("List Participants")<br/>
	print("----------")<br/>
	print(json.encode(e.participants))<br/>
	print("----------")<br/>
end)<br/>
</pre></code>
		<li>gc.multiplayer.setMatchOutcome(participantId,listener) -- list participants</li>
		<li>participantId(string) -- the id of participant(either PlayerId or gamePlayerID) </li>
		<li>listener(function)</li>
		<unordered-list-item>
			<li>status(string)-- can be "outcomeSet", "matchNotActive", or "playerNotFound"</li>
		</unordered-list-item>
<code><pre>
gamecenter.multiplayer.setMatchOutcome( "participantId", function(e)<br/>
    print("Set Match Outcome")<br/>
    print("----------")<br/>
    print(e.status)<br/>
    print("----------")<br/>
end)<br/>
</pre></code>
		<h3><li>gc.accessPoint -- handles gamecenter access point for iOS 14+</li></h3>
		<unordered-list-item>
			<li>gc.accessPoint.setActive(shouldEnable)</li>
			<li>shouldEnable(boolean) -- A Boolean value that determines whether to display the access point</li>
			<li></li>
<code><pre>
print(gc.accessPoint.setActive(true))
</pre></code>
			<li>gc.accessPoint.setLocation(location)</li>
			<li>location(string) -- location of access point icon "bottomLeading", "bottomTrailing","topLeading", or "topTrailing"</li>
			<li></li>
<code><pre>
gc.accessPoint.setLocation("bottomLeading")
</pre></code>
			<li>gc.accessPoint.setShowHighlights(shouldEnable)</li>
			<li>shouldEnable(boolean) -- A Boolean value that indicates whether to display highlights for achievements and current ranks for leaderboards.</li>
			<li></li>
<code><pre>
gc.accessPoint.setShowHighlights(true)
</pre></code>
			<li>gc.accessPoint.setFocused(shouldFocus)</li>
			<li>shouldFocus(boolean) --  only tvOS, A Boolean value that indicates whether the access point is in focus on tvOS.</li>
<code><pre>
gc.accessPoint.setFocused(true) -- only for apple tv
</pre></code>
			<li></li>
			<li>gc.accessPoint.triggerAccessPoint() -- Displays the Game Center dashboard</li>
			<li></li>
<code><pre>
gc.accessPoint.triggerAccessPoint()
</pre></code>
			<li>gc.accessPoint.triggerAccessPointWithType(accessPointType) -- Displays the Game Center dashboard in the specified state</li>
			<li>accessPointType(string) -- can be "default", "leaderboards","achievements", "challenges", "localPlayer", or "dashboard"</li>
			<li></li>
<code><pre>
gc.accessPoint.triggerAccessPointWithType("achievements")
</pre></code>
	</unordered-list-item>
	<p></p>
	<p><h3>Build Settings:</h3></p>
<code><pre>settings =<br/>
{<br/>
	plugins = {<br/>
		["plugin.gamecenter"] =<br/>
		{<br/>
			publisherId="tech.scotth",<br/>
			marketplaceId = "insert marketplace account ID",<br/>
		},<br/>
    }<br/>
}</pre></code>
	<p></p>
	<p><h4>Helpful links:</h4></p>
	<p><a href="https://solar2dmarketplace.com/plugins?GameCenter_tech-scotth">Get Plugin</a></p>
	<p><a href="https://github.com/scottrules44/gamecenter-corona-demo">Example</a></p>
	<p><a href="https://forums.solar2d.com/c/corona-marketplace/13">Support</a></p>
</div>
