<div id = "main">
	<h3><a id="firebaseDatabase">Firebase Database Plugin</a></h3>
	<p></p>
	<p>This plugin allows you to access <a href="https://firebase.google.com">firebase</a> database api.</p>
	<p></p>
	<p><h3>Platforms:</h3>Android 5+ and iOS 8+</p>
	<p></p>
	<p><h3>Functions:</h3></p>
	<p></p>
	<p><h4>firebaseDatabase.init()</h4></p>
	<p></p>
	<p><h4>firebaseDatabase.setOnline(isActive)</h4>--isActive(boolean) if set to true then we are online. If set to false we are offline.</p>
	<p></p>
	<p><h4>firebaseDatabase.setPersistenceEnabled(enabled)</h4>--enabled(boolean) enable disk persistence which app writes the data locally to the device so your app can maintain state while offline, even if the user or operating system restarts the app</p>
	<p></p>
	<p><h4>firebaseDatabase.set(path, data, listener)</h4>-- set data</p>
	<p>path(string) path to set data</p>
	<p></p>
	<p>data(string, boolean, interger, table) data to set at the path specified</p>
	<p></p>
	<p>listener(function) If event.isError == true then no data was set and an event.error is returned. If event.isError == false then data was set. </p>
	<p></p>
	<p><h4>firebaseDatabase.update(path, data, listener)</h4>-- update data</p>
	<p>path(string) path to update data</p>
	<p></p>
	<p>data(table) data to update at the path specified</p>
	<p></p>
	<p>listener(function) If event.isError == true then no data was updated and an event.error is returned. If event.isError == false then data was updated. </p>
	<p></p>
	<p><h4>firebaseDatabase.delete(path, listener)</h4>-- delete data</p>
	<p>path(string) path to delete data</p>
	<p></p>
	<p>listener(function) If event.isError == true then no data was deleted and an event.error is returned. If event.isError == false then data was deleted.</p>
	<p></p>
	<p><h4>firebaseDatabase.get(path, listener, querySortFilter)</h4>-- get data</p>
	<p>path(string) path to get data</p>
	<p></p>
	<p>listener(function) If event.isError == true then no data was received and an event.error is returned. If event.isError == false then data was received and event.data is returned which contains data at given path.</p>
	<p></p>
	<p>querySortFilter(table)(optional) allows you to sort and filter data {sort="byKey", "byValue", or "byChild", sortChild= child to sort data(note sort must be set to "byChild"), limitedToFirst = number to limit,  limitedToLast = number to limit, startingAtValue= number or string, startingAfterValue= number or string, endingAtValue= number or string, endingBeforeValue= number or string, equalToValue= number or string }</p>
<code><pre>
firebaseDatabase.get("leaderboard", function (ev)
  if(ev.isError) then
      native.showAlert( "Could not Get Data", ev.error , {"Ok"} )
  else
      native.showAlert( "Sorted Data Received", json.encode( ev.data ) , {"Ok"} )
  end
end, {sort = "byChild" , sortChild="points", limitedToLast = 2}) --Last is will give us the top scores
</pre></code>
	<p></p>
	<p><h4>firebaseDatabase.startListener(path, listener, querySortFilter)</h4>-- listen for new data changes for a path (note can only handle one path at a time)</p>
	<p>path(string) path to listen for new data change</p>
	<p></p>
	<p>listener(function) If event.isError == true then no data was received and an event.error is returned. If event.isError == false then data was received and event.data is returned which contains data at given path.</p>
	<p></p>
	<p>querySortFilter(table)(optional) allows you to sort and filter data {sort="byKey", "byValue", or "byChild", sortChild= child to sort data(note sort must be set to "byChild"), limitedToFirst = number to limit,  limitedToLast = number to limit, startingAtValue= number or string, startingAfterValue= number or string, endingAtValue= number or string, endingBeforeValue= number or string, equalToValue= number or string }</p>
	<p></p>
	<p><h4>firebaseDatabase.stopListener()</h4>--stop listening for new data changes</p>
	<p><a id="setup"><h3>Setup:</h3></a></h3></p>
	<p>Please go to your firebase console. Go to Realtime Database>Rules and turn off user auth for database realtime access in order to test</p>
<code><pre>{<br/>
	"rules": {<br/>
		".read": true,<br/>
		".write": true<br/>
	}<br/>
}</pre></code>
	<p>Make sure you download and include GoogleServices-Info.plist and put in root folder of corona project. Also add your google-services.json to your root folder and useGoogleServicesJson = true in build.settings.</p>
	<p></p>
	<img src="/pluginDocs/projectSettings.png">
	<p></p>
	<img src="/pluginDocs/androidJson.png">
	<p></p>
	<img src="/pluginDocs/iosPlist.png">
	<p></p>
<code><pre>settings =<br/>
{<br/>
	plugins =<br/>
	{<br/>
		["plugin.firebaseDatabase"] =<br/>
		{<br/>
		  publisherId="tech.scotth",<br/>
		  marketplaceId = "insert marketplace account ID",<br/>
		},<br/>
	},<br/>
	android =<br/>
    {<br/>
        useGoogleServicesJson = true,<br/>
	},<br/>
}</code></pre>
	<p></p>
	<h5> Helpful Links:</h5>
	<p><a href="https://solar2dmarketplace.com/plugins?FirebaseDatabase_tech-scotth">Get Plugin</a></p>
	<p> <a href="https://github.com/scottrules44/firebaseDatabase-demo">Example</a> </p>
	<p> <a href="https://forums.solar2d.com/c/corona-marketplace/13">Support</a> </p>
</div>