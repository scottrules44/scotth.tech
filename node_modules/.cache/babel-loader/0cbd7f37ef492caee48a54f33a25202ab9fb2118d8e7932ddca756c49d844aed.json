{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n *\n * @typedef Options\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [label='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [backLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n */\n\nimport { ok as assert } from 'uvu/assert';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\nconst own = {}.hasOwnProperty;\n\n/**\n * @param {Options} [options={}]\n * @returns {HtmlExtension}\n */\nexport function gfmFootnoteHtml() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const label = options.label || 'Footnotes';\n  const backLabel = options.backLabel || 'Back to content';\n  const clobberPrefix = options.clobberPrefix === undefined || options.clobberPrefix === null ? 'user-content-' : options.clobberPrefix;\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack = /** @type {Array<boolean>} */this.getData('tightStack');\n        stack.push(false);\n      },\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer();\n      },\n      gfmFootnoteCallString() {\n        this.buffer();\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions = /** @type {Record<string, string>} */\n        this.getData('gfmFootnoteDefinitions');\n        const footnoteStack = /** @type {Array<string>} */\n        this.getData('gfmFootnoteDefinitionStack');\n        const tightStack = /** @type {Array<boolean>} */\n        this.getData('tightStack');\n        const current = footnoteStack.pop();\n        const value = this.resume();\n        assert(current, 'expected to be in a footnote');\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', definitions = {});\n        }\n        if (!own.call(definitions, current)) definitions[current] = value;\n        tightStack.pop();\n        this.setData('slurpOneLineEnding', true);\n        // “Hack” to prevent a line ending from showing up if we’re in a definition in\n        // an empty list item.\n        this.setData('lastWasTag');\n      },\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack = /** @type {Array<string>} */\n        this.getData('gfmFootnoteDefinitionStack');\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', footnoteStack = []);\n        }\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)));\n        this.resume(); // Drop the label.\n        this.buffer(); // Get ready for a value.\n      },\n\n      gfmFootnoteCallString(token) {\n        let calls = /** @type {Array<string>|undefined} */\n        this.getData('gfmFootnoteCallOrder');\n        let counts = /** @type {Record<string, number>|undefined} */\n        this.getData('gfmFootnoteCallCounts');\n        const id = normalizeIdentifier(this.sliceSerialize(token));\n        /** @type {number} */\n        let counter;\n        this.resume();\n        if (!calls) this.setData('gfmFootnoteCallOrder', calls = []);\n        if (!counts) this.setData('gfmFootnoteCallCounts', counts = {});\n        const index = calls.indexOf(id);\n        const safeId = sanitizeUri(id.toLowerCase());\n        if (index === -1) {\n          calls.push(id);\n          counts[id] = 1;\n          counter = calls.length;\n        } else {\n          counts[id]++;\n          counter = index + 1;\n        }\n        const reuseCounter = counts[id];\n        this.tag('<sup><a href=\"#' + clobberPrefix + 'fn-' + safeId + '\" id=\"' + clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : '') + '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' + String(counter) + '</a></sup>');\n      },\n      null() {\n        const calls = /** @type {Array<string>} */\n        this.getData('gfmFootnoteCallOrder') || [];\n        const counts = /** @type {Record<string, number>} */\n        this.getData('gfmFootnoteCallCounts') || {};\n        const definitions = /** @type {Record<string, string>} */\n        this.getData('gfmFootnoteDefinitions') || {};\n        let index = -1;\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('<section data-footnotes=\"\" class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">');\n          this.raw(this.encode(label));\n          this.tag('</h2>');\n          this.lineEndingIfNeeded();\n          this.tag('<ol>');\n        }\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index];\n          const safeId = sanitizeUri(id.toLowerCase());\n          let referenceIndex = 0;\n          /** @type {Array<string>} */\n          const references = [];\n          while (++referenceIndex <= counts[id]) {\n            references.push('<a href=\"#' + clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : '') + '\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"' + this.encode(backLabel) + '\">↩' + (referenceIndex > 1 ? '<sup>' + referenceIndex + '</sup>' : '') + '</a>');\n          }\n          const reference = references.join(' ');\n          let injected = false;\n          this.lineEndingIfNeeded();\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">');\n          this.lineEndingIfNeeded();\n          this.tag(definitions[id].replace(/<\\/p>(?:\\r?\\n|\\r)?$/, ( /** @type {string} */$0) => {\n            injected = true;\n            return ' ' + reference + $0;\n          }));\n          if (!injected) {\n            this.lineEndingIfNeeded();\n            this.tag(reference);\n          }\n          this.lineEndingIfNeeded();\n          this.tag('</li>');\n        }\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('</ol>');\n          this.lineEndingIfNeeded();\n          this.tag('</section>');\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["ok","assert","normalizeIdentifier","sanitizeUri","own","hasOwnProperty","gfmFootnoteHtml","options","arguments","length","undefined","label","backLabel","clobberPrefix","enter","gfmFootnoteDefinition","stack","getData","push","gfmFootnoteDefinitionLabelString","buffer","gfmFootnoteCallString","exit","definitions","footnoteStack","tightStack","current","pop","value","resume","setData","call","token","sliceSerialize","calls","counts","id","counter","index","indexOf","safeId","toLowerCase","reuseCounter","tag","String","null","lineEndingIfNeeded","raw","encode","referenceIndex","references","reference","join","injected","replace","$0"],"sources":["/Users/scottharrison/Desktop/scotth.tech/node_modules/micromark-extension-gfm-footnote/dev/lib/html.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n *\n * @typedef Options\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [label='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [backLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Options} [options={}]\n * @returns {HtmlExtension}\n */\nexport function gfmFootnoteHtml(options = {}) {\n  const label = options.label || 'Footnotes'\n  const backLabel = options.backLabel || 'Back to content'\n  const clobberPrefix =\n    options.clobberPrefix === undefined || options.clobberPrefix === null\n      ? 'user-content-'\n      : options.clobberPrefix\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack = /** @type {Array<boolean>} */ (this.getData('tightStack'))\n        stack.push(false)\n      },\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer()\n      },\n      gfmFootnoteCallString() {\n        this.buffer()\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions = /** @type {Record<string, string>} */ (\n          this.getData('gfmFootnoteDefinitions')\n        )\n        const footnoteStack = /** @type {Array<string>} */ (\n          this.getData('gfmFootnoteDefinitionStack')\n        )\n        const tightStack = /** @type {Array<boolean>} */ (\n          this.getData('tightStack')\n        )\n        const current = footnoteStack.pop()\n        const value = this.resume()\n\n        assert(current, 'expected to be in a footnote')\n\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', (definitions = {}))\n        }\n\n        if (!own.call(definitions, current)) definitions[current] = value\n\n        tightStack.pop()\n        this.setData('slurpOneLineEnding', true)\n        // “Hack” to prevent a line ending from showing up if we’re in a definition in\n        // an empty list item.\n        this.setData('lastWasTag')\n      },\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack = /** @type {Array<string>} */ (\n          this.getData('gfmFootnoteDefinitionStack')\n        )\n\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', (footnoteStack = []))\n        }\n\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)))\n        this.resume() // Drop the label.\n        this.buffer() // Get ready for a value.\n      },\n      gfmFootnoteCallString(token) {\n        let calls = /** @type {Array<string>|undefined} */ (\n          this.getData('gfmFootnoteCallOrder')\n        )\n        let counts = /** @type {Record<string, number>|undefined} */ (\n          this.getData('gfmFootnoteCallCounts')\n        )\n        const id = normalizeIdentifier(this.sliceSerialize(token))\n        /** @type {number} */\n        let counter\n\n        this.resume()\n\n        if (!calls) this.setData('gfmFootnoteCallOrder', (calls = []))\n        if (!counts) this.setData('gfmFootnoteCallCounts', (counts = {}))\n\n        const index = calls.indexOf(id)\n        const safeId = sanitizeUri(id.toLowerCase())\n\n        if (index === -1) {\n          calls.push(id)\n          counts[id] = 1\n          counter = calls.length\n        } else {\n          counts[id]++\n          counter = index + 1\n        }\n\n        const reuseCounter = counts[id]\n\n        this.tag(\n          '<sup><a href=\"#' +\n            clobberPrefix +\n            'fn-' +\n            safeId +\n            '\" id=\"' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (reuseCounter > 1 ? '-' + reuseCounter : '') +\n            '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' +\n            String(counter) +\n            '</a></sup>'\n        )\n      },\n      null() {\n        const calls = /** @type {Array<string>} */ (\n          this.getData('gfmFootnoteCallOrder') || []\n        )\n        const counts = /** @type {Record<string, number>} */ (\n          this.getData('gfmFootnoteCallCounts') || {}\n        )\n        const definitions = /** @type {Record<string, string>} */ (\n          this.getData('gfmFootnoteDefinitions') || {}\n        )\n        let index = -1\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag(\n            '<section data-footnotes=\"\" class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">'\n          )\n          this.raw(this.encode(label))\n          this.tag('</h2>')\n          this.lineEndingIfNeeded()\n          this.tag('<ol>')\n        }\n\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index]\n          const safeId = sanitizeUri(id.toLowerCase())\n          let referenceIndex = 0\n          /** @type {Array<string>} */\n          const references = []\n\n          while (++referenceIndex <= counts[id]) {\n            references.push(\n              '<a href=\"#' +\n                clobberPrefix +\n                'fnref-' +\n                safeId +\n                (referenceIndex > 1 ? '-' + referenceIndex : '') +\n                '\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"' +\n                this.encode(backLabel) +\n                '\">↩' +\n                (referenceIndex > 1\n                  ? '<sup>' + referenceIndex + '</sup>'\n                  : '') +\n                '</a>'\n            )\n          }\n\n          const reference = references.join(' ')\n          let injected = false\n\n          this.lineEndingIfNeeded()\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">')\n          this.lineEndingIfNeeded()\n          this.tag(\n            definitions[id].replace(\n              /<\\/p>(?:\\r?\\n|\\r)?$/,\n              (/** @type {string} */ $0) => {\n                injected = true\n                return ' ' + reference + $0\n              }\n            )\n          )\n\n          if (!injected) {\n            this.lineEndingIfNeeded()\n            this.tag(reference)\n          }\n\n          this.lineEndingIfNeeded()\n          this.tag('</li>')\n        }\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag('</ol>')\n          this.lineEndingIfNeeded()\n          this.tag('</section>')\n        }\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}