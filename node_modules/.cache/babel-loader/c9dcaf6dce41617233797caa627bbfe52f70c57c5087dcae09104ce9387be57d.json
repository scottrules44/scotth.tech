{"ast":null,"code":"// Convert a string from kebab-case to camelCase\nvar camelCase = function camelCase(string) {\n  return string.replace(/\\-(\\w|$)/g, function (m, p1) {\n    return p1.toUpperCase();\n  });\n};\nvar convertPropertyName = function convertPropertyName(prop) {\n  prop = prop.toLowerCase(); // Always return 'float' as 'cssFloat'\n\n  if (prop === 'float') {\n    return 'cssFloat';\n  } // Skip CSS variables\n\n  if (prop.startsWith('--')) {\n    return prop;\n  } // Handle `-ms-` prefix to camelCase as msPropertyName, not MsPropertyName\n\n  if (prop.startsWith('-ms-')) {\n    prop = prop.substr(1);\n  }\n  return camelCase(prop);\n};\nvar splitDeclarations = function splitDeclarations(cssText) {\n  var declarations = [];\n  var capturing;\n  var i = cssText.length;\n  var last = i; // Split into declarations by semi-colon (outside quotes or parentheses)\n\n  while (i-- > -1) {\n    // Capture unescaped quotes\n    if ((cssText[i] === '\"' || cssText[i] === \"'\") && cssText[i - 1] !== '\\\\') {\n      if (!capturing) {\n        capturing = cssText[i];\n      } else if (cssText[i] === capturing) {\n        capturing = false;\n      }\n    } // Start capturing parentheses\n\n    if (!capturing && cssText[i] === ')') {\n      capturing = cssText[i];\n    } // Stop capturing parentheses\n\n    if (cssText[i] === '(' && capturing === ')') {\n      capturing = false;\n    } // Split at semi-colon\n\n    if (i < 0 || !capturing && cssText[i] === ';') {\n      declarations.unshift(cssText.slice(i + 1, last));\n      last = i;\n    }\n  }\n  return declarations;\n};\nvar splitDeclaration = function splitDeclaration(declaration) {\n  var i = declaration.indexOf(':');\n  return [declaration.substr(0, i).trim(), declaration.substr(i + 1).trim()];\n};\nvar cssToStyle = function cssToStyle(cssText) {\n  return splitDeclarations(cssText).map(splitDeclaration).filter(function (_ref) {\n    var name = _ref[0],\n      value = _ref[1];\n    return name && value;\n  }).reduce(function (styles, _ref2) {\n    var name = _ref2[0],\n      value = _ref2[1];\n    styles[convertPropertyName(name)] = value;\n    return styles;\n  }, {});\n};\nexport default cssToStyle;","map":{"version":3,"names":["camelCase","string","replace","m","p1","toUpperCase","convertPropertyName","prop","toLowerCase","startsWith","substr","splitDeclarations","cssText","declarations","capturing","i","length","last","unshift","slice","splitDeclaration","declaration","indexOf","trim","cssToStyle","map","filter","_ref","name","value","reduce","styles","_ref2"],"sources":["/Users/scottharrison/Desktop/scotth.tech/node_modules/css-to-style/src/index.js"],"sourcesContent":["// Convert a string from kebab-case to camelCase\nconst camelCase = (string) =>\n  string.replace(/\\-(\\w|$)/g, (m, p1) => p1.toUpperCase());\n\nconst convertPropertyName = (prop) => {\n  prop = prop.toLowerCase();\n\n  // Always return 'float' as 'cssFloat'\n  if (prop === 'float') {\n    return 'cssFloat';\n  }\n\n  // Skip CSS variables\n  if (prop.startsWith('--')) {\n    return prop;\n  }\n\n  // Handle `-ms-` prefix to camelCase as msPropertyName, not MsPropertyName\n  if (prop.startsWith('-ms-')) {\n    prop = prop.substr(1);\n  }\n\n  return camelCase(prop);\n};\n\nconst splitDeclarations = (cssText) => {\n  const declarations = [];\n  let capturing;\n  let i = cssText.length;\n  let last = i;\n\n  // Split into declarations by semi-colon (outside quotes or parentheses)\n  while (i-- > -1) {\n    // Capture unescaped quotes\n    if ((cssText[i] === '\"' || cssText[i] === \"'\") && cssText[i - 1] !== '\\\\') {\n      if (!capturing) {\n        capturing = cssText[i];\n      } else if (cssText[i] === capturing) {\n        capturing = false;\n      }\n    }\n    // Start capturing parentheses\n    if (!capturing && cssText[i] === ')') {\n      capturing = cssText[i];\n    }\n    // Stop capturing parentheses\n    if (cssText[i] === '(' && capturing === ')') {\n      capturing = false;\n    }\n    // Split at semi-colon\n    if (i < 0 || (!capturing && cssText[i] === ';')) {\n      declarations.unshift(cssText.slice(i + 1, last));\n      last = i;\n    }\n  }\n\n  return declarations;\n};\n\nconst splitDeclaration = (declaration) => {\n  const i = declaration.indexOf(':');\n  return [declaration.substr(0, i).trim(), declaration.substr(i + 1).trim()];\n};\n\nconst cssToStyle = (cssText) =>\n  splitDeclarations(cssText)\n    .map(splitDeclaration)\n    .filter(([name, value]) => name && value)\n    .reduce((styles, [name, value]) => {\n      styles[convertPropertyName(name)] = value;\n      return styles;\n    }, {});\n\nexport default cssToStyle;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}