{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (`boolean`, default:\n *   `true`).\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport { ok as assert } from 'uvu/assert';\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n\n/**\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfmStrikethrough() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let single = options.singleTilde;\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [codes.tilde]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [codes.tilde]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n\n            // Between.\n            splice(nextEvents, nextEvents.length, 0, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = types.data;\n      }\n    }\n    return events;\n  }\n\n  /** @type {Tokenizer} */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      assert(code === codes.tilde, 'expected `~`');\n      if (previous === codes.tilde && events[events.length - 1][1].type !== types.characterEscape) {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === codes.tilde) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === constants.attentionSideAfter && Boolean(before);\n      token._close = !before || before === constants.attentionSideAfter && Boolean(after);\n      return ok(code);\n    }\n  }\n}","map":{"version":3,"names":["ok","assert","splice","classifyCharacter","resolveAll","codes","constants","types","gfmStrikethrough","options","arguments","length","undefined","single","singleTilde","tokenizer","tokenize","tokenizeStrikethrough","resolveAllStrikethrough","text","tilde","insideSpan","null","attentionMarkers","events","context","index","type","_close","open","_open","end","offset","start","strikethrough","Object","assign","nextEvents","parser","constructs","slice","data","effects","nok","previous","size","code","characterEscape","enter","more","before","consume","token","exit","after","attentionSideAfter","Boolean"],"sources":["/Users/scottharrison/Desktop/scotth.tech/node_modules/micromark-extension-gfm-strikethrough/dev/lib/syntax.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (`boolean`, default:\n *   `true`).\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfmStrikethrough(options = {}) {\n  let single = options.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n\n  if (single === null || single === undefined) {\n    single = true\n  }\n\n  return {\n    text: {[codes.tilde]: tokenizer},\n    insideSpan: {null: [tokenizer]},\n    attentionMarkers: {null: [codes.tilde]}\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n\n            // Between.\n            splice(\n              nextEvents,\n              nextEvents.length,\n              0,\n              resolveAll(\n                context.parser.constructs.insideSpan.null,\n                events.slice(open + 1, index),\n                context\n              )\n            )\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n\n            splice(events, open - 1, index - open + 3, nextEvents)\n\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = types.data\n      }\n    }\n\n    return events\n  }\n\n  /** @type {Tokenizer} */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      assert(code === codes.tilde, 'expected `~`')\n\n      if (\n        previous === codes.tilde &&\n        events[events.length - 1][1].type !== types.characterEscape\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n\n      if (code === codes.tilde) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open =\n        !after || (after === constants.attentionSideAfter && Boolean(before))\n      token._close =\n        !before || (before === constants.attentionSideAfter && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}